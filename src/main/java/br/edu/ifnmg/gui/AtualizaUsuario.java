/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package br.edu.ifnmg.gui;

import br.edu.ifnmg.adm.Adm;
import br.edu.ifnmg.adm.AdmDao;
import br.edu.ifnmg.credential.Credential;
import br.edu.ifnmg.credential.CredentialDao;
import br.edu.ifnmg.librarian.Librarian;
import br.edu.ifnmg.librarian.LibrarianDao;
import br.edu.ifnmg.reader.Reader;
import br.edu.ifnmg.reader.ReaderDao;
import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Arrays;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;

/**
 *
 * @author joaok
 */
public class AtualizaUsuario extends javax.swing.JInternalFrame {

    /**
     * Creates new form AtualizaUsuario
     */
    private static AtualizaUsuario instance;

    public AtualizaUsuario() {
        initComponents();
        // Centralização da janela
        //setLocationRelativeTo(null);
        lblAtualizado.setVisible(false);
        lblSelecione.setVisible(false);
        lblErro1.setVisible(false);
        lblErro.setVisible(false);
        updateUsuarioTable();
        ocultarColunaId();
    }

    public static AtualizaUsuario getInstance() {
        if (instance == null) {
            instance = new AtualizaUsuario();
        }
        TelaPrincipal.getInstance(TelaPrincipal.current_cred).jDesktop.add(instance);
        instance.updateUsuarioTable();
        return instance;
    }

    private void ocultarColunaId() {
        int columnIndex = 0;
        TableColumn colunaId = tableUsuario.getColumnModel().getColumn(columnIndex);
        colunaId.setMinWidth(0);
        colunaId.setMaxWidth(0);
        colunaId.setPreferredWidth(0);
        colunaId.setResizable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")

    private LocalDate getSelectedDate(com.toedter.calendar.JDateChooser dateChooser) {
        if (dateChooser.getDate() != null) {
            return dateChooser.getDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
        }
        return LocalDate.now();
    }

    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPasswordField1 = new javax.swing.JPasswordField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableUsuario = new javax.swing.JTable();
        txtUsuario = new javax.swing.JTextField();
        lblTitulo = new javax.swing.JLabel();
        lblAtualizado = new javax.swing.JLabel();
        lblAutor = new javax.swing.JLabel();
        btnAtualiza = new javax.swing.JButton();
        lblPaginas = new javax.swing.JLabel();
        lblAno = new javax.swing.JLabel();
        lblEdicao = new javax.swing.JLabel();
        lblErro1 = new javax.swing.JLabel();
        txtNome = new javax.swing.JTextField();
        txtEmail = new javax.swing.JTextField();
        lblTdsUsuario = new javax.swing.JLabel();
        calDate = new com.toedter.calendar.JDateChooser();
        lblErro = new javax.swing.JLabel();
        lblSelecione = new javax.swing.JLabel();
        pwdSenha = new javax.swing.JPasswordField();

        jPasswordField1.setText("jPasswordField1");

        setClosable(true);
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosing(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        tableUsuario.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Id", "Nome", "Email", "Aniversário", "Papel", "Usuário"
            }
        ));
        jScrollPane1.setViewportView(tableUsuario);

        lblTitulo.setText("Nome:");

        lblAtualizado.setForeground(new java.awt.Color(0, 0, 255));
        lblAtualizado.setText("Usuário Atualizado Com Sucesso!!");

        lblAutor.setText("Email:");

        btnAtualiza.setText("Atualizar");
        btnAtualiza.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAtualizaActionPerformed(evt);
            }
        });

        lblPaginas.setText("Data de Aniversário:");

        lblAno.setText("Usuário:");

        lblEdicao.setText("Senha:");

        lblErro1.setForeground(new java.awt.Color(240, 0, 0));
        lblErro1.setText("Digite Novamente a Senha ou Atualize!! ");

        lblTdsUsuario.setFont(new java.awt.Font("Segoe UI Black", 0, 24)); // NOI18N
        lblTdsUsuario.setText("Usuários Cadrastrados");

        lblErro.setForeground(new java.awt.Color(240, 0, 0));
        lblErro.setText("Erro ao Atualizar Usuário");

        lblSelecione.setForeground(new java.awt.Color(240, 0, 0));
        lblSelecione.setText("Selecione um Usuário");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(94, 94, 94)
                        .addComponent(lblTdsUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblEdicao)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(pwdSenha))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblAno)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtUsuario))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblAutor)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtEmail))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblPaginas)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(calDate, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblTitulo)
                                .addGap(2, 2, 2)
                                .addComponent(txtNome)))
                        .addContainerGap(12, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(btnAtualiza)
                                .addGap(14, 14, 14))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(lblAtualizado, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(53, 53, 53))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(lblErro1)
                                .addGap(50, 50, 50))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(lblErro, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(72, 72, 72))))))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(588, Short.MAX_VALUE)
                    .addComponent(lblSelecione)
                    .addGap(80, 80, 80)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblTdsUsuario)
                    .addComponent(lblErro))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 276, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblErro1, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblTitulo))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblAutor)
                            .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(calDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblPaginas))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblAno))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblEdicao, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(pwdSenha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(23, 23, 23)
                        .addComponent(lblAtualizado)
                        .addGap(18, 18, 18)
                        .addComponent(btnAtualiza)
                        .addGap(21, 21, 21))))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(242, Short.MAX_VALUE)
                    .addComponent(lblSelecione)
                    .addGap(69, 69, 69)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAtualizaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAtualizaActionPerformed
        // TODO add your handling code here:
        int selectedRow = tableUsuario.getSelectedRow();
        if (selectedRow != -1) {
            String userRole = (String) tableUsuario.getValueAt(selectedRow, 4);
            Long userIdToUpdate = (Long) tableUsuario.getValueAt(selectedRow, 0);
            if ("administrador".equals(userRole)) {
                try {

                    AdmDao admDao = new AdmDao();
                    Adm userToUpdate = admDao.findById(userIdToUpdate);

                    userToUpdate.setName(txtNome.getText());
                    userToUpdate.setEmail(txtEmail.getText());
                    userToUpdate.setBirthDate(getSelectedDate(calDate));

                    userToUpdate.getCredential().setUsername(txtUsuario.getText());
                    String newPassword = new String(pwdSenha.getPassword());
                    if (newPassword.isEmpty()) {
                        throw new Exception("A senha não pode estar vazia.");
                    }
                    userToUpdate.getCredential().setPassword(new String(pwdSenha.getPassword()));
                    System.out.println(userToUpdate.getCredential().getPassword());
                    String title = "Library System - " + userToUpdate.getName();
                    
                    TelaPrincipal.getInstance(TelaPrincipal.current_cred).setTitle(title);
                    
                    
                    userToUpdate.getCredential().setId(userToUpdate.getId()*-1);
                    
                    admDao.saveOrUpdate(userToUpdate);

                    txtNome.setText("");
                    txtEmail.setText("");
                    calDate.setDate(null);
                    txtUsuario.setText("");
                    pwdSenha.setText("");

                    lblAtualizado.setVisible(true);
                    lblSelecione.setVisible(false);
                    lblErro1.setVisible(false);
                    lblErro.setVisible(false);

                    updateUsuarioTable();
                } catch (Exception ex) {
                    System.out.println("Erro ao tentar atualizar o usuário: " + ex.getMessage());
                    lblErro.setVisible(true);
                    lblErro1.setVisible(true);
                }
            } else if ("bibliotecário".equals(userRole)) {
                try {

                    LibrarianDao librarianDao = new LibrarianDao();
                    Librarian userToUpdate = librarianDao.findById(userIdToUpdate);

                    userToUpdate.setName(txtNome.getText());
                    userToUpdate.setEmail(txtEmail.getText());
                    userToUpdate.setBirthDate(getSelectedDate(calDate));

                    userToUpdate.getCredential().setUsername(txtUsuario.getText());
                    String newPassword = new String(pwdSenha.getPassword());
                    if (newPassword.isEmpty()) {
                        throw new Exception("A senha não pode estar vazia.");
                    }
                    userToUpdate.getCredential().setPassword(new String(pwdSenha.getPassword()));

                    librarianDao.saveOrUpdate(userToUpdate);

                    txtNome.setText("");
                    txtEmail.setText("");
                    calDate.setDate(null);
                    txtUsuario.setText("");
                    pwdSenha.setText("");

                    lblAtualizado.setVisible(true);
                    lblSelecione.setVisible(false);
                    lblErro1.setVisible(false);
                    lblErro.setVisible(false);

                    updateUsuarioTable();
                } catch (Exception ex) {
                    System.out.println("Erro ao tentar atualizar o usuário: " + ex.getMessage());
                    lblErro.setVisible(true);
                    lblErro1.setVisible(true);
                }
            } else if ("leitor".equals(userRole)) {
                try {

                    ReaderDao readerDao = new ReaderDao();
                    Reader userToUpdate = readerDao.findById(userIdToUpdate);

                    userToUpdate.setName(txtNome.getText());
                    userToUpdate.setEmail(txtEmail.getText());
                    userToUpdate.setBirthDate(getSelectedDate(calDate));

                    userToUpdate.getCredential().setUsername(txtUsuario.getText());
                    String newPassword = new String(pwdSenha.getPassword());
                    if (newPassword.isEmpty()) {
                        throw new Exception("A senha não pode estar vazia.");
                    }
                    userToUpdate.getCredential().setPassword(new String(pwdSenha.getPassword()));
                    
                    
                    
                    readerDao.saveOrUpdate(userToUpdate);

                    txtNome.setText("");
                    txtEmail.setText("");
                    calDate.setDate(null);
                    txtUsuario.setText("");
                    pwdSenha.setText("");

                    lblAtualizado.setVisible(true);
                    lblSelecione.setVisible(false);
                    lblErro1.setVisible(false);
                    lblErro.setVisible(false);

                    updateUsuarioTable();
                } catch (Exception ex) {
                    System.out.println("Erro ao tentar atualizar o usuário: " + ex.getMessage());
                    lblErro.setVisible(true);
                    lblErro1.setVisible(true);
                }
            }
        } else {
            txtNome.setText("");
            txtEmail.setText("");
            calDate.setDate(null);
            txtUsuario.setText("");
            pwdSenha.setText("");
            lblSelecione.setVisible(true);
            lblErro1.setVisible(false);
            lblAtualizado.setVisible(false);
            lblErro.setVisible(false);
        }
    }//GEN-LAST:event_btnAtualizaActionPerformed

    private void formInternalFrameClosing(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosing
        // TODO add your handling code here:
        instance = null;
    }//GEN-LAST:event_formInternalFrameClosing

    private void updateUsuarioTable() {
        try {
            ArrayList<Credential> credentialList = new CredentialDao().findAll();
            DefaultTableModel model = (DefaultTableModel) tableUsuario.getModel();
            model.setRowCount(0);
            DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
            for (Credential credential : credentialList) {
                String formattedDate = credential.getUser().getBirthDate().format(dateFormatter);
                Object[] rowData = {
                    credential.getId(),
                    credential.getUser().getName(),
                    credential.getUser().getEmail(),
                    formattedDate,
                    credential.getUser().getRole().getName(),
                    credential.getUser().getCredential().getUsername()
                };
                model.addRow(rowData);
            }

            // Add a listener for the table
            tableUsuario.getSelectionModel().addListSelectionListener(e -> {
                int selectedRow = tableUsuario.getSelectedRow();
                if (selectedRow != -1) {
                    String selectedNome = (String) tableUsuario.getValueAt(selectedRow, 1);
                    String selectedEmail = (String) tableUsuario.getValueAt(selectedRow, 2);
                    String selectedAniversario = String.valueOf(tableUsuario.getValueAt(selectedRow, 3));
                    String selectedUseuario = (String) tableUsuario.getValueAt(selectedRow, 5);

                    txtNome.setText(selectedNome);
                    txtEmail.setText(selectedEmail);
                    txtUsuario.setText(selectedUseuario);

                    try {
                        java.util.Date selectedDate = new SimpleDateFormat("dd/MM/yyyy").parse(selectedAniversario);
                        calDate.setDate(selectedDate);
                    } catch (Exception ex) {
                        ex.printStackTrace();
                    }

                    lblErro1.setVisible(false);
                    lblSelecione.setVisible(false);
                    lblAtualizado.setVisible(false);
                    lblErro.setVisible(false);
                }

            });
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }


    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AtualizaUsuario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AtualizaUsuario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AtualizaUsuario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AtualizaUsuario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AtualizaUsuario().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAtualiza;
    private com.toedter.calendar.JDateChooser calDate;
    private javax.swing.JPasswordField jPasswordField1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblAno;
    private javax.swing.JLabel lblAtualizado;
    private javax.swing.JLabel lblAutor;
    private javax.swing.JLabel lblEdicao;
    private javax.swing.JLabel lblErro;
    private javax.swing.JLabel lblErro1;
    private javax.swing.JLabel lblPaginas;
    private javax.swing.JLabel lblSelecione;
    private javax.swing.JLabel lblTdsUsuario;
    private javax.swing.JLabel lblTitulo;
    private javax.swing.JPasswordField pwdSenha;
    private javax.swing.JTable tableUsuario;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtNome;
    private javax.swing.JTextField txtUsuario;
    // End of variables declaration//GEN-END:variables
}
